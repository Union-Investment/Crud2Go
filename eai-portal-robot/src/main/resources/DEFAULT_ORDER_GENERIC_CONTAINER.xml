<?xml version="1.0" encoding="UTF-8"?>
<portlet xmlns="http://www.unioninvestment.de/eai/portal/crud-portlet"
	title="Beispiel fÃ¼r Script-Container">
	<page>
		<table id="table1">
			<script-container delegate="new MyCustomBackend()" >
				<default-order>
					<order column="CNUMBER5_2" direction="desc" />
					<order column="CVARCHAR5_NN" />
				</default-order>
			</script-container>
			<action onExecution="it.table.refresh()" title="Refresh"></action>
		</table>

	</page>
	<script><![CDATA[
    class MyCustomBackend implements ScriptContainerBackend {
    
    	Map data = [:] as LinkedHashMap
    	
		Closure metaData = {
			ID(type:Long,readonly:true, required:true, partOfPrimaryKey:true)
			CNUMBER5_2(type:Integer,readonly:false, required:false)
			CDATE(type:java.util.Date,readonly:false, required:false)
			CTIMESTAMP(type:java.util.Date,readonly:true, required:false)
			CVARCHAR5_NN(type:String,readonly:true, required:true)
			CNUMBER5_2_NN(type:Integer,readonly:true, required:true)
			CDATE_NN(type:java.util.Date,readonly:true, required:false)
			CTIMESTAMP_NN(type:java.util.Date,readonly:true, required:false)
			TESTDATA(type:String,readonly:true, required:false)
		}
		
		List read() {
			if (!data) {
				def rnd = new Random()
				def id = 1
				(1..5).each { i ->
					(1..2).each { j ->
						data.put id, [
							id,
							i,
							new GregorianCalendar(1990+rnd.nextInt(20), rnd.nextInt(12), rnd.nextInt(30)+1).time,
							new GregorianCalendar(1990+rnd.nextInt(20), rnd.nextInt(12), rnd.nextInt(30)+1, rnd.nextInt(24), rnd.nextInt(60), rnd.nextInt(60)).time,
							"Testdata ${j}",
							4710+id,
							new GregorianCalendar(1990+rnd.nextInt(20), rnd.nextInt(12), rnd.nextInt(30)+1).time,
							new GregorianCalendar(1990+rnd.nextInt(20), rnd.nextInt(12), rnd.nextInt(30)+1).time,
							'012345678901234567890123456789'.substring(0, new Random().nextInt(30))
						]
						id++
					}
				}
			}
			return data.values().asList()
		}
		
		void update(List rows) {
			rows.each { row ->
				if (row.isNewItem()) {
					data.put(row.values.ID, [row.values.ID, row.values.CNUMBER5_2, row.values.CDATE,row.values.CTIMESTAMP,row.values.CVARCHAR5_NN,row.values.CNUMBER5_2_NN,row.values.CDATE_NN,row.values.CTIMESTAMP_NN,row.values.TESTDATA])
				} else if (row.isModified()) {
				  	data.put(row.values.ID, [row.values.ID, row.values.CNUMBER5_2, row.values.CDATE,row.values.CTIMESTAMP,row.values.CVARCHAR5_NN,row.values.CNUMBER5_2_NN,row.values.CDATE_NN,row.values.CTIMESTAMP_NN,row.values.TESTDATA])
				} else if (row.isDeleted()) {
					data.remove(row.values.ID)	
				}
			}
		}
	}
]]>
</script>
</portlet>
